<< GITHUB >>

1. version control system (버전관리시스템)

    - 원래는 버전관리 목적으로 나왔다. (그 이후 연동작업, 협업관련으로도 현재는 많이 쓰이고 있다.)

    - 버전관리(version control)

        1. 작업의 history를 저장하는 기능 (저장하는 방법 => commit)
    
    - git

        1. 버전관리시스템 중 가장 대중화 된 framework

        2. github => git을 온라인과 연동하는 서비스

        3. git interface

            - CLI-interface
                직접 terminal에 git 명령어를 입력하는 방법

            - GUI-interface
                그래픽 사용자 환경(GUI)을 제공 => icon, mouse로 컨트롤 할 수 있는 interface
                대표적인것은 source tree

            - source tree
                1. source tree download (그전에 아틀라시안 로그인!)
                2. git-bucket 옵션은 건너뛰기함  
                3. 설치중 mercurial 경고 뜨면 무시해도 됨
                4. ssh키가 없다면 아니오 선택

        4. git 폴더
            - source tree 초기화면
                1. clone : github과 연동시
                2. add : 이미 git으로 관리되어 있는 폴더를 추가
                3. create : git을 시작할 폴더를 추가

        5. 프로젝트 폴더 버전 관리 시작
            - create : 폴더경로 설정 (계정에 저장소 생성하기 체크 하지 말 것)
            - .git 폴더 생성 확인

    - git 사용법

        1. commit
            - version을 생성
            - commit
            - 파란색 줄기 = main줄기, master
            - 맨위 user가 있는 곳 (속이 빈 원)이 head => 현재 작업중인 commit을 말한다.
            - checkout은 해당 commit 시점으로 옮겨 가는걸 말한다.

        2. reset
            - 선택한 commit 이후의 history를 제거
            - hard옵션
            - github와 연동시 force push를 사용해야만 함

        3. reverse (revert)
            - branch를 생성하지 않고 과거 commit을 최상위 commit으로 등록
            - confilct를 해결 후 stage 등록 후 커밋
            - 최상위 commit시점으로 checkout 하는것
            - 마지막 commit시점부터 차례대로 아래의 commit을 차례대로 reverse

        4. 파일 관리
            - .gitignore
                1. .git폴더와 동일한 경로에 .gitignore파일을 생성
                2. 폴더명 / 파일명 등을 한줄단위로 기록
                3. source tree의 파일리스트에서 우클릭 후 ignore 선택

            - discard
                1. commit에서 제외한다.

            - remove 
                1. 파일, 폴더를 아예 제거한다.

        5. branch
            - 생성방법
                1. 분기점 commit으로 checkout
                2. branch 생성 (history 우클릭, 상단메뉴 branch icon)
            
            - merge(branch를 하나로 병합한다.)
                1. 순서 
                    - 예시 : b-브런치를 master로 합병
                        1. master-브런치로 checkout
                        2. b-브런치를 우클릭 후 merge
                        3. b-브런치를 제거
                
                2. 종류
                    - fast-foward : history의 마지막 commit에서 branch를 생성 후 merge    
                    - three-way-merge : branch의 분기가 나누어졌을 경우 merge (conflict를 해결해야 함!!!!!!!)

                3. 주의사항
                    - merge가 된 branch는 reset으로 다시 복원할 수 없음

            - delete(제거) 
            - conflict(충돌) 
                1. select-current : checkout된 branch의 내용으로 변경
                2. select-incoming  : 병합될 branch의 내용으로 변경
                3. select-both : 두개의 branch 내용을 병합
2. clouding data
3. co-working