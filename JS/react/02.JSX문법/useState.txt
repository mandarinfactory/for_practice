■ event-binding

    ● onClick속성
        - 생명주기(life_cycle) 관계로 객체를 호출 할수 없음(document.querySelector등 사용 X)

        - 함수 1개만 사용할 경우,
            --> onClick = {함수명} ===> 절대로 '함수명()'꼴로 쓰면 안된다!!!

        - 다수의 명령어를 실행할 경우,
            --> onClick = {() => {함수명1(), 함수명2(), 함수명3(), ...}}

■ state 관리
    ● state : 화면을 바꾸는 모오오오오오드으으은 변수들!!!
        └-> state값이 변경될 때 화면이 갱신되는 목적!
    
    ● 순서
        1. 선언
            component(const App = () {})밖에서 import
                --> import { useState } from "react";
            component(const App = () {})안에서 declare
                --> const [state함수명, 변경함수명] = useState('초기값')
        2. 연결
            - 항상 JSX문법내에서 연결한다!(return (~~))
            <p className="result">{state함수명}</p>
        3. 갱신
            변경함수명(값);
    
    ● 주의

        1. 주의(useState 사용시 증감연산 주의사항!)
            ※ changeState(a++)를, changeState(++a) 또는 changeState(a+1)로 써야한다!
        
        2. ★★★★★★★★★★★★★★ useState 변경 ★★★★★★★★★★★★★★★
            ※ useState로 값을 변경하는 시점이 아닌 실제로 DOM생성하기 직전에 변경된다.
            ※ re-rander시 실행되는 문법안에서는 절대 사용하지 말것!!!!!!
              └-> event 혹은 특정조건에서만 사용 O

■ useRef
    ● element를 선택하기 위해 사용

    1. module 불러오기
    --> import { useRef } from "react";

    2. 이름생성
    --> const(주로 const를 쓴다!) 이름 = useRef(); // useRef()는 function이다!

    3. 이름연결
    -->  <input ref={이름} className="num1" type="number" />
         --> 꼭 ref내에서는 한개의 이름만 쓰인다!

    4. 호출
    이름.current

    5. setTimeout, setInterval의 ID는 항상!!!!!!!! useRef를 이용해서 선언해야함!